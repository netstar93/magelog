<?php
/* * ****************************************************
 * Package   : QuickView
 * Author    : HIEPNH
 * Copyright : (c) 2014
 * ***************************************************** */
?>
<?php $_helper = $this->helper('catalog/output'); ?>
<?php $_product = $this->getProduct(); ?>
<script type="text/javascript">
    var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
</script>
<div id="messages_product_view"><?php echo $this->getMessagesBlock()->getGroupedHtml() ?></div>
<div class="product-view row">
    <div class="product-essential">
        <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if ($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
            <?php echo $this->getBlockHtml('formkey') ?>
            <div class="no-display">
                <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                <input type="hidden" name="related_product" id="related-products-field" value="" />
            </div>
            <div class="product-img-box col-sm-6">
                <?php echo $this->getChildHtml('media') ?>
            </div>
            <div class="product-shop col-sm-6">
                <div class="product-name">
                    <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
                </div>
                <?php echo $this->getReviewsSummaryHtml($_product, false, true) ?>
                <?php echo $this->getChildHtml('alert_urls') ?>
                <?php echo $this->getChildHtml('product_type_data') ?>
                <?php echo $this->getTierPriceHtml() ?>
                <?php echo $this->getChildHtml('extrahint') ?>
				<?php if ($_product->getShortDescription()): ?>
                    <div class="short-description">
                        <div class="std"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>
                    </div>
                <?php endif; ?>
                <?php if (!$this->hasOptions()): ?>
                    <div class="add-to-box">
                        <?php if ($_product->isSaleable()): ?>
                            <?php echo $this->getChildHtml('addtocart') ?>
                        <?php endif; ?>
                        <?php echo $this->getChildHtml('addto') ?>
                    </div>
                    <?php echo $this->getChildHtml('extra_buttons') ?>
                <?php elseif (!$_product->isSaleable()): ?>
                    <div class="add-to-box">
                        <?php echo $this->getChildHtml('addto') ?>
                    </div>
                <?php endif; ?>

                <?php echo $this->getChildHtml('other'); ?>

                <?php if ($_product->isSaleable() && $this->hasOptions()): ?>
                    <?php echo $this->getChildChildHtml('container1', '', true, true) ?>
                <?php endif; ?>
            </div>
            <div class="clearer"></div>
            <?php if ($_product->isSaleable() && $this->hasOptions()): ?>
                <?php echo $this->getChildChildHtml('container2', '', true, true) ?>
            <?php endif; ?>
        </form>
        <script type="text/javascript">
            //<![CDATA[
            var ajaxSubmitForm = new VarienForm('product_addtocart_form');
            ajaxSubmitForm.submit = function (button, url) {
                if (this.validator.validate()) {
                    var form = this.form;
                    var oldUrl = form.action;
                    if (url) {
                        form.action = url;
                    }
                    var e = null;
                    if (!url) {
                        url = mgsjQuery('#product_addtocart_form').attr('action');
                    }
                    url = url.replace('checkout/cart', 'ajaxcart/cart');
                    var data = mgsjQuery('#product_addtocart_form').serialize();
                    mgsjQuery('#ajax_cart_loader').show();
                    try {
                        mgsjQuery.ajax({
                            url: url,
                            dataType: 'json',
                            type: 'POST',
                            data: data,
                            success: function (data, textStatus, xhr) {
                                mgsjQuery('#ajax_cart_loader').hide();
                                if (data.status === 'ERROR') {
                                    alert(data.message);
                                } else {
                                    if (parent.mgsjQuery('.block-cart')) {
                                        parent.mgsjQuery('.block-cart').replaceWith(data.sidebar);
                                    }
                                    if (parent.mgsjQuery('.header .links')) {
                                        parent.mgsjQuery('.header .links').replaceWith(data.toplink);
                                    }
                                    if (parent.mgsjQuery('.top-bar .links')) {
                                        parent.mgsjQuery('.top-bar .links').replaceWith(data.toplink);
                                    }
									
									if (parent.mgsjQuery('#top-cart-icon')) {
										parent.mgsjQuery('#top-cart-icon').replaceWith(data.top_cart_icon);
									}

									if (parent.mgsjQuery('#top-cart-dropdown')) {
										parent.mgsjQuery('#top-cart-dropdown').replaceWith(data.top_cart);
										if (parent.mgsjQuery('.btn-remove').length > 0)
										{
											for (var i = 0; i < parent.mgsjQuery('.btn-remove').length; i++) {
												var str_sidebar = 'javascript:if(confirm(\'Are you sure you would like to remove this item from the shopping cart?\')) { ajaxCartProductDelete(\'' + parent.mgsjQuery('.btn-remove')[i].attributes.href.nodeValue + '\'); }';
												parent.mgsjQuery('#top-cart-dropdown').find(parent.mgsjQuery('.btn-remove')[i]).attr('onclick', str_sidebar);
												parent.mgsjQuery('#top-cart-dropdown').find(parent.mgsjQuery('.btn-remove')[i]).attr('href', 'javascript:void(0);');
											}
										}
									}

									if (parent.mgsjQuery('#block-cart-sidebar')) {
										parent.mgsjQuery('#block-cart-sidebar').replaceWith(data.sidebar_cart);
										if (parent.mgsjQuery('.btn-remove').length > 0)
										{
											for (var i = 0; i < parent.mgsjQuery('.btn-remove').length; i++) {
												var str_sidebar = 'javascript:if(confirm(\'Are you sure you would like to remove this item from the shopping cart?\')) { ajaxCartProductDelete(\'' + parent.mgsjQuery('.btn-remove')[i].attributes.href.nodeValue + '\'); }';
												parent.mgsjQuery('#block-cart-sidebar').find(parent.mgsjQuery('.btn-remove')[i]).attr('onclick', str_sidebar);
												parent.mgsjQuery('#block-cart-sidebar').find(parent.mgsjQuery('.btn-remove')[i]).attr('href', 'javascript:void(0);');
											}
										}
									}
									
                                    if (parent.mgsjQuery('.block-wishlist')) {
                                        parent.mgsjQuery('.block-wishlist').replaceWith(data.mini_wishlist);
                                    } else {
                                        if (parent.mgsjQuery('.col-right')) {
                                            parent.mgsjQuery('.col-right').prepend(data.mini_wishlist);
                                        }
                                    }
                                    if (parent.mgsjQuery('.cart')) {
                                        parent.mgsjQuery('.cart').replaceWith(data.cart);
                                    }
                                    if (parent.mgsjQuery('.my-wishlist')) {
                                        if(data.my_wishlist && data.my_wishlist !== '' && data.my_wishlist !== null) {
                                    parent.mgsjQuery('.my-wishlist').replaceWith(data.my_wishlist);
                                }
                                    }
                                    var mfp = parent.mgsjQuery.magnificPopup.instance;
                                    mfp.items[0] = {src: data.product_confirmation, type: 'inline'};
                                    mfp.updateItemHTML();
                                    parent.truncateOptions();
                                    parent.replaceStrings();
                                }
                            }
                        });
                    } catch (e) {
                    }
                    this.form.action = oldUrl;
                    if (e) {
                        throw e;
                    }
                }
            }.bind(ajaxSubmitForm);
            ajaxSubmitForm.submitLight = function (button, url) {
                if (this.validator) {
                    var nv = Validation.methods;
                    delete Validation.methods['required-entry'];
                    delete Validation.methods['validate-one-required'];
                    delete Validation.methods['validate-one-required-by-name'];
                    // Remove custom datetime validators
                    for (var methodName in Validation.methods) {
                        if (methodName.match(/^validate-datetime-.*/i)) {
                            delete Validation.methods[methodName];
                        }
                    }
                    if (this.validator.validate()) {
                        if (url) {
                            this.form.action = url;
                        }
                        this.form.submit();
                    }
                    Object.extend(Validation.methods, nv);
                }
            }.bind(ajaxSubmitForm);
            //]]>
			
        </script>
    </div>
</div>
